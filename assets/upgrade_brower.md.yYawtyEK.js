import{_ as a}from"./chunks/header.vue_vue_type_script_setup_true_lang.dWYU8gfP.js";import{d as e,c as r,J as t,V as i,o as l}from"./chunks/framework.eh9rp3qH.js";import"./chunks/firstNotUndefined.BvnkRdw1.js";const o=i('<h2 id="一-浏览器输入-url-地址之后会发生什么" tabindex="-1">一，浏览器输入 url 地址之后会发生什么？ <a class="header-anchor" href="#一-浏览器输入-url-地址之后会发生什么" aria-label="Permalink to &quot;一，浏览器输入 url 地址之后会发生什么？&quot;">​</a></h2><ol><li>URL 解析：浏览器会解析 URL，将其分解为不同的组成部分，如协议（例如 HTTP、HTTPS）、域名、路径等。</li><li>DNS 解析：浏览器会检查 URL 中的域名，并向域名系统（DNS）服务器发送请求，以获取与该域名对应的 IP 地址。</li><li>建立连接：一旦浏览器获得了目标服务器的 IP 地址，它将尝试与服务器建立 TCP 连接。这涉及到通过三次握手建立可靠的连接。</li><li>发送 HTTP 请求：一旦建立了 TCP 连接，浏览器会向服务器发送 HTTP 请求。请求中包含了请求的方法（GET、POST 等）、头部信息（如 User-Agent、Cookie 等）以及可能的请求体（对于 POST 请求）。</li><li>服务器处理请求：服务器接收到浏览器发送的 HTTP 请求后，会根据请求的内容进行处理。这可能涉及到读取数据库、执行服务器端代码等操作。</li><li>服务器响应：服务器处理完请求后，会生成一个 HTTP 响应，其中包含了响应状态码、响应头部信息和响应体（通常是 HTML、CSS、JavaScript 等）。</li><li>接收响应：浏览器接收到服务器发送的 HTTP 响应后，会解析响应头部信息，并根据响应状态码判断请求是否成功。</li><li>渲染页面：如果响应成功，浏览器会根据响应体中的 HTML、CSS 和 JavaScript 等内容开始渲染页面。</li><li>关闭连接：一旦页面渲染完成，浏览器会关闭与服务器的 TCP 连接。但是，如果页面中存在其他资源（如图片、样式表、脚本等），浏览器可能会继续发送请求来获取这些资源。</li></ol><h2 id="二-浏览器渲染原理" tabindex="-1">二，浏览器渲染原理 <a class="header-anchor" href="#二-浏览器渲染原理" aria-label="Permalink to &quot;二，浏览器渲染原理&quot;">​</a></h2>',3),u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"upgrade/brower.md","filePath":"upgrade/brower.md","lastUpdated":1707040875000}'),s={name:"upgrade/brower.md"},_=e({...s,setup(d){return(n,c)=>(l(),r("div",null,[t(a),o]))}});export{u as __pageData,_ as default};
